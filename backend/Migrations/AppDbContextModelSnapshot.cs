// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlacesApi.Data;

#nullable disable

namespace PlacesAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlacesApi.Entities.GoogleApiQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Point>("Center")
                        .IsRequired()
                        .HasColumnType("geography (Point, 4326)");

                    b.Property<DateTime>("QueryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Radius")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GoogleApiQueries");
                });

            modelBuilder.Entity("PlacesApi.Entities.Place", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FormattedAddress")
                        .HasColumnType("text");

                    b.Property<string>("IconBackgroundColor")
                        .HasColumnType("text");

                    b.Property<string>("IconMaskBaseUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastGoogleUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography (Point, 4326)");

                    b.Property<string>("PrimaryTypeDisplayName")
                        .HasColumnType("text");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int?>("UserRatingCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "GIST");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("PlacesApi.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorDisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AuthorPhotoUri")
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("RelativePublishTimeDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PlaceId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PlacesApi.Entities.Review", b =>
                {
                    b.HasOne("PlacesApi.Entities.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("PlacesApi.Entities.Place", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
